// Code generated by mockery v2.53.3. DO NOT EDIT.

package grpc

import (
	context "context"

	connect "github.com/bufbuild/connect-go"

	mock "github.com/stretchr/testify/mock"

	v1 "hexagonal-go-grpc/proto/gen/api/v1"
)

// MockICustomerGrpcHandler is an autogenerated mock type for the ICustomerGrpcHandler type
type MockICustomerGrpcHandler struct {
	mock.Mock
}

type MockICustomerGrpcHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockICustomerGrpcHandler) EXPECT() *MockICustomerGrpcHandler_Expecter {
	return &MockICustomerGrpcHandler_Expecter{mock: &_m.Mock}
}

// ActivateById provides a mock function with given fields: ctx, request
func (_m *MockICustomerGrpcHandler) ActivateById(ctx context.Context, request *connect.Request[v1.CustomerActivateRequest]) (*connect.Response[v1.CustomerActivateResponse], error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ActivateById")
	}

	var r0 *connect.Response[v1.CustomerActivateResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerActivateRequest]) (*connect.Response[v1.CustomerActivateResponse], error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerActivateRequest]) *connect.Response[v1.CustomerActivateResponse]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[v1.CustomerActivateResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[v1.CustomerActivateRequest]) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICustomerGrpcHandler_ActivateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateById'
type MockICustomerGrpcHandler_ActivateById_Call struct {
	*mock.Call
}

// ActivateById is a helper method to define mock.On call
//   - ctx context.Context
//   - request *connect.Request[v1.CustomerActivateRequest]
func (_e *MockICustomerGrpcHandler_Expecter) ActivateById(ctx interface{}, request interface{}) *MockICustomerGrpcHandler_ActivateById_Call {
	return &MockICustomerGrpcHandler_ActivateById_Call{Call: _e.mock.On("ActivateById", ctx, request)}
}

func (_c *MockICustomerGrpcHandler_ActivateById_Call) Run(run func(ctx context.Context, request *connect.Request[v1.CustomerActivateRequest])) *MockICustomerGrpcHandler_ActivateById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[v1.CustomerActivateRequest]))
	})
	return _c
}

func (_c *MockICustomerGrpcHandler_ActivateById_Call) Return(_a0 *connect.Response[v1.CustomerActivateResponse], _a1 error) *MockICustomerGrpcHandler_ActivateById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICustomerGrpcHandler_ActivateById_Call) RunAndReturn(run func(context.Context, *connect.Request[v1.CustomerActivateRequest]) (*connect.Response[v1.CustomerActivateResponse], error)) *MockICustomerGrpcHandler_ActivateById_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockICustomerGrpcHandler) Create(ctx context.Context, request *connect.Request[v1.CustomerCreateRequest]) (*connect.Response[v1.CustomerCreateResponse], error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *connect.Response[v1.CustomerCreateResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerCreateRequest]) (*connect.Response[v1.CustomerCreateResponse], error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerCreateRequest]) *connect.Response[v1.CustomerCreateResponse]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[v1.CustomerCreateResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[v1.CustomerCreateRequest]) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICustomerGrpcHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockICustomerGrpcHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request *connect.Request[v1.CustomerCreateRequest]
func (_e *MockICustomerGrpcHandler_Expecter) Create(ctx interface{}, request interface{}) *MockICustomerGrpcHandler_Create_Call {
	return &MockICustomerGrpcHandler_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockICustomerGrpcHandler_Create_Call) Run(run func(ctx context.Context, request *connect.Request[v1.CustomerCreateRequest])) *MockICustomerGrpcHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[v1.CustomerCreateRequest]))
	})
	return _c
}

func (_c *MockICustomerGrpcHandler_Create_Call) Return(_a0 *connect.Response[v1.CustomerCreateResponse], _a1 error) *MockICustomerGrpcHandler_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICustomerGrpcHandler_Create_Call) RunAndReturn(run func(context.Context, *connect.Request[v1.CustomerCreateRequest]) (*connect.Response[v1.CustomerCreateResponse], error)) *MockICustomerGrpcHandler_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateById provides a mock function with given fields: ctx, request
func (_m *MockICustomerGrpcHandler) DeactivateById(ctx context.Context, request *connect.Request[v1.CustomerDeactivateRequest]) (*connect.Response[v1.CustomerDeactivateResponse], error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateById")
	}

	var r0 *connect.Response[v1.CustomerDeactivateResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerDeactivateRequest]) (*connect.Response[v1.CustomerDeactivateResponse], error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerDeactivateRequest]) *connect.Response[v1.CustomerDeactivateResponse]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[v1.CustomerDeactivateResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[v1.CustomerDeactivateRequest]) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICustomerGrpcHandler_DeactivateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateById'
type MockICustomerGrpcHandler_DeactivateById_Call struct {
	*mock.Call
}

// DeactivateById is a helper method to define mock.On call
//   - ctx context.Context
//   - request *connect.Request[v1.CustomerDeactivateRequest]
func (_e *MockICustomerGrpcHandler_Expecter) DeactivateById(ctx interface{}, request interface{}) *MockICustomerGrpcHandler_DeactivateById_Call {
	return &MockICustomerGrpcHandler_DeactivateById_Call{Call: _e.mock.On("DeactivateById", ctx, request)}
}

func (_c *MockICustomerGrpcHandler_DeactivateById_Call) Run(run func(ctx context.Context, request *connect.Request[v1.CustomerDeactivateRequest])) *MockICustomerGrpcHandler_DeactivateById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[v1.CustomerDeactivateRequest]))
	})
	return _c
}

func (_c *MockICustomerGrpcHandler_DeactivateById_Call) Return(_a0 *connect.Response[v1.CustomerDeactivateResponse], _a1 error) *MockICustomerGrpcHandler_DeactivateById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICustomerGrpcHandler_DeactivateById_Call) RunAndReturn(run func(context.Context, *connect.Request[v1.CustomerDeactivateRequest]) (*connect.Response[v1.CustomerDeactivateResponse], error)) *MockICustomerGrpcHandler_DeactivateById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, request
func (_m *MockICustomerGrpcHandler) DeleteById(ctx context.Context, request *connect.Request[v1.CustomerDeleteRequest]) (*connect.Response[v1.CustomerDeleteResponse], error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 *connect.Response[v1.CustomerDeleteResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerDeleteRequest]) (*connect.Response[v1.CustomerDeleteResponse], error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerDeleteRequest]) *connect.Response[v1.CustomerDeleteResponse]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[v1.CustomerDeleteResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[v1.CustomerDeleteRequest]) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICustomerGrpcHandler_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockICustomerGrpcHandler_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - request *connect.Request[v1.CustomerDeleteRequest]
func (_e *MockICustomerGrpcHandler_Expecter) DeleteById(ctx interface{}, request interface{}) *MockICustomerGrpcHandler_DeleteById_Call {
	return &MockICustomerGrpcHandler_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, request)}
}

func (_c *MockICustomerGrpcHandler_DeleteById_Call) Run(run func(ctx context.Context, request *connect.Request[v1.CustomerDeleteRequest])) *MockICustomerGrpcHandler_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[v1.CustomerDeleteRequest]))
	})
	return _c
}

func (_c *MockICustomerGrpcHandler_DeleteById_Call) Return(_a0 *connect.Response[v1.CustomerDeleteResponse], _a1 error) *MockICustomerGrpcHandler_DeleteById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICustomerGrpcHandler_DeleteById_Call) RunAndReturn(run func(context.Context, *connect.Request[v1.CustomerDeleteRequest]) (*connect.Response[v1.CustomerDeleteResponse], error)) *MockICustomerGrpcHandler_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, request
func (_m *MockICustomerGrpcHandler) GetById(ctx context.Context, request *connect.Request[v1.CustomerRequest]) (*connect.Response[v1.CustomerResponse], error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *connect.Response[v1.CustomerResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerRequest]) (*connect.Response[v1.CustomerResponse], error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerRequest]) *connect.Response[v1.CustomerResponse]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[v1.CustomerResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[v1.CustomerRequest]) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICustomerGrpcHandler_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockICustomerGrpcHandler_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - request *connect.Request[v1.CustomerRequest]
func (_e *MockICustomerGrpcHandler_Expecter) GetById(ctx interface{}, request interface{}) *MockICustomerGrpcHandler_GetById_Call {
	return &MockICustomerGrpcHandler_GetById_Call{Call: _e.mock.On("GetById", ctx, request)}
}

func (_c *MockICustomerGrpcHandler_GetById_Call) Run(run func(ctx context.Context, request *connect.Request[v1.CustomerRequest])) *MockICustomerGrpcHandler_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[v1.CustomerRequest]))
	})
	return _c
}

func (_c *MockICustomerGrpcHandler_GetById_Call) Return(_a0 *connect.Response[v1.CustomerResponse], _a1 error) *MockICustomerGrpcHandler_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICustomerGrpcHandler_GetById_Call) RunAndReturn(run func(context.Context, *connect.Request[v1.CustomerRequest]) (*connect.Response[v1.CustomerResponse], error)) *MockICustomerGrpcHandler_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, request
func (_m *MockICustomerGrpcHandler) GetList(ctx context.Context, request *connect.Request[v1.CustomerListRequest]) (*connect.Response[v1.CustomerListResponse], error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 *connect.Response[v1.CustomerListResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerListRequest]) (*connect.Response[v1.CustomerListResponse], error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerListRequest]) *connect.Response[v1.CustomerListResponse]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[v1.CustomerListResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[v1.CustomerListRequest]) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICustomerGrpcHandler_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockICustomerGrpcHandler_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - request *connect.Request[v1.CustomerListRequest]
func (_e *MockICustomerGrpcHandler_Expecter) GetList(ctx interface{}, request interface{}) *MockICustomerGrpcHandler_GetList_Call {
	return &MockICustomerGrpcHandler_GetList_Call{Call: _e.mock.On("GetList", ctx, request)}
}

func (_c *MockICustomerGrpcHandler_GetList_Call) Run(run func(ctx context.Context, request *connect.Request[v1.CustomerListRequest])) *MockICustomerGrpcHandler_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[v1.CustomerListRequest]))
	})
	return _c
}

func (_c *MockICustomerGrpcHandler_GetList_Call) Return(_a0 *connect.Response[v1.CustomerListResponse], _a1 error) *MockICustomerGrpcHandler_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICustomerGrpcHandler_GetList_Call) RunAndReturn(run func(context.Context, *connect.Request[v1.CustomerListRequest]) (*connect.Response[v1.CustomerListResponse], error)) *MockICustomerGrpcHandler_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, request
func (_m *MockICustomerGrpcHandler) Register(ctx context.Context, request *connect.Request[v1.CustomerRegisterRequest]) (*connect.Response[v1.CustomerRegisterResponse], error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *connect.Response[v1.CustomerRegisterResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerRegisterRequest]) (*connect.Response[v1.CustomerRegisterResponse], error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerRegisterRequest]) *connect.Response[v1.CustomerRegisterResponse]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[v1.CustomerRegisterResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[v1.CustomerRegisterRequest]) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICustomerGrpcHandler_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockICustomerGrpcHandler_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - request *connect.Request[v1.CustomerRegisterRequest]
func (_e *MockICustomerGrpcHandler_Expecter) Register(ctx interface{}, request interface{}) *MockICustomerGrpcHandler_Register_Call {
	return &MockICustomerGrpcHandler_Register_Call{Call: _e.mock.On("Register", ctx, request)}
}

func (_c *MockICustomerGrpcHandler_Register_Call) Run(run func(ctx context.Context, request *connect.Request[v1.CustomerRegisterRequest])) *MockICustomerGrpcHandler_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[v1.CustomerRegisterRequest]))
	})
	return _c
}

func (_c *MockICustomerGrpcHandler_Register_Call) Return(_a0 *connect.Response[v1.CustomerRegisterResponse], _a1 error) *MockICustomerGrpcHandler_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICustomerGrpcHandler_Register_Call) RunAndReturn(run func(context.Context, *connect.Request[v1.CustomerRegisterRequest]) (*connect.Response[v1.CustomerRegisterResponse], error)) *MockICustomerGrpcHandler_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockICustomerGrpcHandler) Update(ctx context.Context, request *connect.Request[v1.CustomerUpdateRequest]) (*connect.Response[v1.CustomerUpdateResponse], error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *connect.Response[v1.CustomerUpdateResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerUpdateRequest]) (*connect.Response[v1.CustomerUpdateResponse], error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[v1.CustomerUpdateRequest]) *connect.Response[v1.CustomerUpdateResponse]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[v1.CustomerUpdateResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[v1.CustomerUpdateRequest]) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICustomerGrpcHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockICustomerGrpcHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request *connect.Request[v1.CustomerUpdateRequest]
func (_e *MockICustomerGrpcHandler_Expecter) Update(ctx interface{}, request interface{}) *MockICustomerGrpcHandler_Update_Call {
	return &MockICustomerGrpcHandler_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockICustomerGrpcHandler_Update_Call) Run(run func(ctx context.Context, request *connect.Request[v1.CustomerUpdateRequest])) *MockICustomerGrpcHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[v1.CustomerUpdateRequest]))
	})
	return _c
}

func (_c *MockICustomerGrpcHandler_Update_Call) Return(_a0 *connect.Response[v1.CustomerUpdateResponse], _a1 error) *MockICustomerGrpcHandler_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICustomerGrpcHandler_Update_Call) RunAndReturn(run func(context.Context, *connect.Request[v1.CustomerUpdateRequest]) (*connect.Response[v1.CustomerUpdateResponse], error)) *MockICustomerGrpcHandler_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockICustomerGrpcHandler creates a new instance of MockICustomerGrpcHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockICustomerGrpcHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockICustomerGrpcHandler {
	mock := &MockICustomerGrpcHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
